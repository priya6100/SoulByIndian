{"ast":null,"code":"//centrlized api\nimport axios from \"axios\";\nimport { authConstants } from \"../actions/constants\";\nimport store from \"../store\";\nimport { api } from \"../urlConfig\";\nconst token = window.localStorage.getItem('token');\nconst axiosInstance = axios.create({\n  baseURL: api,\n  headers: {\n    'Authorization': token ? `Bearer ${token}` : ''\n  }\n});\naxiosInstance.interceptors.request.use(req => {\n  const {\n    auth\n  } = store.getState();\n\n  if (auth.token) {\n    req.headers.Authorization = `Bearer ${auth.token}`;\n  }\n\n  return req;\n});\naxiosInstance.interceptors.response.use(res => {\n  return res;\n}, error => {\n  console.log(error.response);\n  const status = error.response ? error.response.status : 500;\n\n  if (status && status === 500) {\n    localStorage.clear();\n    store.dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["E:/redo final/frontend-main/src/helpers/axios.js"],"names":["axios","authConstants","store","api","token","window","localStorage","getItem","axiosInstance","create","baseURL","headers","interceptors","request","use","req","auth","getState","Authorization","response","res","error","console","log","status","clear","dispatch","type","LOGOUT_SUCCESS","Promise","reject"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa;AAE/BC,EAAAA,OAAO,EAAEP,GAFsB;AAG/BQ,EAAAA,OAAO,EAAC;AACJ,qBAAiBP,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADzC;AAHuB,CAAb,CAAtB;AAQAI,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAwCC,GAAD,IAAS;AAC5C,QAAM;AAACC,IAAAA;AAAD,MAASd,KAAK,CAACe,QAAN,EAAf;;AACA,MAAGD,IAAI,CAACZ,KAAR,EAAc;AAEVW,IAAAA,GAAG,CAACJ,OAAJ,CAAYO,aAAZ,GAA6B,UAASF,IAAI,CAACZ,KAAM,EAAjD;AACH;;AACD,SAAOW,GAAP;AACH,CAPD;AASAP,aAAa,CAACI,YAAd,CAA2BO,QAA3B,CAAoCL,GAApC,CAAyCM,GAAD,IAAS;AAC7C,SAAOA,GAAP;AACH,CAFD,EAEIC,KAAD,IAAW;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,QAAlB;AACA,QAAMK,MAAM,GAAGH,KAAK,CAACF,QAAN,GAAiBE,KAAK,CAACF,QAAN,CAAeK,MAAhC,GAAyC,GAAxD;;AACA,MAAGA,MAAM,IAAIA,MAAM,KAAK,GAAxB,EAA4B;AACvBlB,IAAAA,YAAY,CAACmB,KAAb;AACDvB,IAAAA,KAAK,CAACwB,QAAN,CAAe;AAACC,MAAAA,IAAI,EAAE1B,aAAa,CAAC2B;AAArB,KAAf;AAEH;;AAED,SAAOC,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACH,CAZD;AAeA,eAAeb,aAAf","sourcesContent":["//centrlized api\nimport axios from \"axios\";\nimport { authConstants } from \"../actions/constants\";\n\nimport store from \"../store\";\nimport { api } from \"../urlConfig\";\n\nconst token = window.localStorage.getItem('token');\n\nconst axiosInstance = axios.create({\n\n    baseURL: api,\n    headers:{\n        'Authorization': token ? `Bearer ${token}` : ''\n    }\n});\n\naxiosInstance.interceptors.request.use((req) => {\n    const {auth} = store.getState();\n    if(auth.token){\n        \n        req.headers.Authorization = `Bearer ${auth.token}`;\n    }\n    return req;\n});\n\naxiosInstance.interceptors.response.use((res) => {\n    return res;\n}, (error) => {\n    console.log(error.response);\n    const status = error.response ? error.response.status : 500;\n    if(status && status === 500){\n         localStorage.clear();\n        store.dispatch({type: authConstants.LOGOUT_SUCCESS});\n        \n    }\n\n    return Promise.reject(error)\n}\n)\n\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}