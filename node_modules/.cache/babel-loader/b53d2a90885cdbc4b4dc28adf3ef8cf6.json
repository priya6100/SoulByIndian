{"ast":null,"code":"/** @format */\nimport { forgotPasswordConstants } from \"../actions/constants\";\nconst initialState = {\n  email: \"\",\n  otp: \"\",\n  status: \"\",\n  checking: false,\n  checked: false,\n  checkingOtp: false,\n  checkedOtp: false,\n  checkingNewPass: false,\n  checkedNewPass: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_REQUEST:\n      state = { ...state,\n        checking: true,\n        status: `checking email`\n      };\n      break;\n\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_SUCCESS:\n      state = { ...state,\n        email: action.payload.email,\n        otp: action.payload.otp,\n        status: `checking email success`,\n        checking: false,\n        checked: true\n      };\n      break;\n\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_FAILURE:\n      state = { ...state,\n        status: `checking email failed`,\n        checking: false,\n        message: action.payload.error\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHECK_OTP_REQUEST:\n      state = { ...state,\n        status: `checking otp`,\n        checkingOtp: true\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHECK_OTP_SUCCESS:\n      state = { ...state,\n        status: `checking otp success`,\n        checkingOtp: false,\n        checkedOtp: true\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHECK_OTP_FAILURE:\n      state = { ...state,\n        status: `checking otp failed`,\n        checkingOtp: false\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_REQUEST:\n      state = { ...state,\n        status: `changing password`,\n        checkingNewPass: true\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_SUCCESS:\n      state = { ...state,\n        status: `changing password success`,\n        checkingNewPass: false,\n        checkedNewPass: true\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_FAILURE:\n      state = { ...state,\n        status: `changing password failed`,\n        checkingNewPass: false\n      };\n      break;\n\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_ERROR:\n      state = { ...state,\n        status: `changing password error`,\n        checkingNewPass: false\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["E:/redo final/frontend-main/src/reducers/forgotPassword.reducer.js"],"names":["forgotPasswordConstants","initialState","email","otp","status","checking","checked","checkingOtp","checkedOtp","checkingNewPass","checkedNewPass","state","action","type","GET_FORGOT_PASSWORD_REQUEST","GET_FORGOT_PASSWORD_SUCCESS","payload","GET_FORGOT_PASSWORD_FAILURE","message","error","GET_CHECK_OTP_REQUEST","GET_CHECK_OTP_SUCCESS","GET_CHECK_OTP_FAILURE","GET_CHANGE_PASSWORD_REQUEST","GET_CHANGE_PASSWORD_SUCCESS","GET_CHANGE_PASSWORD_FAILURE","GET_CHANGE_PASSWORD_ERROR"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { forgotPasswordConstants } from \"../actions/constants\";\n\nconst initialState = {\n  email: \"\",\n  otp: \"\",\n  status: \"\",\n  checking: false,\n  checked: false,\n  checkingOtp: false,\n  checkedOtp: false,\n  checkingNewPass: false,\n  checkedNewPass: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_REQUEST:\n      state = {\n        ...state,\n        checking: true,\n        status: `checking email`,\n      };\n      break;\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_SUCCESS:\n      state = {\n        ...state,\n        email: action.payload.email,\n        otp: action.payload.otp,\n        status: `checking email success`,\n        checking: false,\n        checked: true,\n      };\n      break;\n    case forgotPasswordConstants.GET_FORGOT_PASSWORD_FAILURE:\n      state = {\n        ...state,\n        status: `checking email failed`,\n        checking: false,\n        message: action.payload.error,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHECK_OTP_REQUEST:\n      state = {\n        ...state,\n        status: `checking otp`,\n        checkingOtp: true,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHECK_OTP_SUCCESS:\n      state = {\n        ...state,\n        status: `checking otp success`,\n        checkingOtp: false,\n        checkedOtp: true,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHECK_OTP_FAILURE:\n      state = {\n        ...state,\n        status: `checking otp failed`,\n        checkingOtp: false,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_REQUEST:\n      state = {\n        ...state,\n        status: `changing password`,\n        checkingNewPass: true,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_SUCCESS:\n      state = {\n        ...state,\n        status: `changing password success`,\n        checkingNewPass: false,\n        checkedNewPass: true,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_FAILURE:\n      state = {\n        ...state,\n        status: `changing password failed`,\n        checkingNewPass: false,\n      };\n      break;\n    case forgotPasswordConstants.GET_CHANGE_PASSWORD_ERROR:\n      state = {\n        ...state,\n        status: `changing password error`,\n        checkingNewPass: false,\n      };\n      break;\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}