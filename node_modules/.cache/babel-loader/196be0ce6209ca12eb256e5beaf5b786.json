{"ast":null,"code":"\"use strict\";\n/*\n * DOCS: https://razorpay.com/docs/invoices/\n */\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar Promise = require(\"promise\"),\n    _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeNotes = _require.normalizeNotes;\n\nmodule.exports = function invoicesApi(api) {\n  var BASE_URL = \"/invoices\",\n      MISSING_ID_ERROR = \"Invoice ID is mandatory\";\n  /**\n   * Invoice entity gets used for both Payment Links and Invoices system.\n   * Few of the methods are only meaningful for Invoices system and\n   * calling those for against/for a Payment Link would throw\n   * Bad request error.\n   */\n\n  return {\n    create: function create() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      /*\n       * Creates invoice of any type(invoice|link|ecod).\n       *\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n      return api.post({\n        url: url,\n        data: data\n      }, callback);\n    },\n    edit: function edit(invoiceId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n      /*\n       * Patches given invoice with new attributes\n       *\n       * @param {String} invoiceId\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL + \"/\" + invoiceId,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n      if (!invoiceId) {\n        return Promise.reject(\"Invoice ID is mandatory\");\n      }\n\n      return api.patch({\n        url: url,\n        data: data\n      }, callback);\n    },\n    issue: function issue(invoiceId, callback) {\n      /*\n       * Issues drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/issue\";\n      return api.post({\n        url: url\n      }, callback);\n    },\n    delete: function _delete(invoiceId, callback) {\n      /*\n       * Deletes drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n      return api.delete({\n        url: url\n      }, callback);\n    },\n    cancel: function cancel(invoiceId, callback) {\n      /*\n       * Cancels issued invoice\n       * \n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/cancel\";\n      return api.post({\n        url: url\n      }, callback);\n    },\n    fetch: function fetch(invoiceId, callback) {\n      /*\n       * Fetches invoice entity with given id\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n      return api.get({\n        url: url\n      }, callback);\n    },\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      /*\n       * Fetches multiple invoices with given query options\n       *\n       * @param {Object} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          url = BASE_URL;\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n      return api.get({\n        url: url,\n        data: _extends({}, params, {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        })\n      }, callback);\n    },\n    notifyBy: function notifyBy(invoiceId, medium, callback) {\n      /*\n       * Send/re-send notification for invoice by given medium\n       * \n       * @param {String} invoiceId\n       * @param {String} medium\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n      if (!invoiceId) {\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      if (!medium) {\n        return Promise.reject(\"`medium` is required\");\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/notify_by/\" + medium;\n      return api.post({\n        url: url\n      }, callback);\n    }\n  };\n};","map":{"version":3,"sources":["E:/redo final/frontend-main/node_modules/razorpay/dist/resources/invoices.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","Promise","require","_require","normalizeDate","normalizeNotes","module","exports","invoicesApi","api","BASE_URL","MISSING_ID_ERROR","create","params","undefined","callback","url","notes","rest","data","post","edit","invoiceId","reject","patch","issue","delete","_delete","cancel","fetch","get","all","from","to","count","skip","Number","notifyBy","medium"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * DOCS: https://razorpay.com/docs/invoices/\n */\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Promise = require(\"promise\"),\n    _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeNotes = _require.normalizeNotes;\n\n\nmodule.exports = function invoicesApi(api) {\n\n  var BASE_URL = \"/invoices\",\n      MISSING_ID_ERROR = \"Invoice ID is mandatory\";\n\n  /**\n   * Invoice entity gets used for both Payment Links and Invoices system.\n   * Few of the methods are only meaningful for Invoices system and\n   * calling those for against/for a Payment Link would throw\n   * Bad request error.\n   */\n\n  return {\n    create: function create() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n\n\n      /*\n       * Creates invoice of any type(invoice|link|ecod).\n       *\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n\n      return api.post({\n        url: url,\n        data: data\n      }, callback);\n    },\n    edit: function edit(invoiceId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n\n      /*\n       * Patches given invoice with new attributes\n       *\n       * @param {String} invoiceId\n       * @param {Object} params\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var url = BASE_URL + \"/\" + invoiceId,\n          notes = params.notes,\n          rest = _objectWithoutProperties(params, [\"notes\"]),\n          data = Object.assign(rest, normalizeNotes(notes));\n\n\n      if (!invoiceId) {\n\n        return Promise.reject(\"Invoice ID is mandatory\");\n      }\n\n      return api.patch({\n        url: url,\n        data: data\n      }, callback);\n    },\n    issue: function issue(invoiceId, callback) {\n\n      /*\n       * Issues drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n\n      if (!invoiceId) {\n\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/issue\";\n\n      return api.post({\n        url: url\n      }, callback);\n    },\n    delete: function _delete(invoiceId, callback) {\n\n      /*\n       * Deletes drafted invoice\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!invoiceId) {\n\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n\n      return api.delete({\n        url: url\n      }, callback);\n    },\n    cancel: function cancel(invoiceId, callback) {\n\n      /*\n       * Cancels issued invoice\n       * \n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!invoiceId) {\n\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/cancel\";\n\n      return api.post({\n        url: url\n      }, callback);\n    },\n    fetch: function fetch(invoiceId, callback) {\n\n      /*\n       * Fetches invoice entity with given id\n       *\n       * @param {String} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      if (!invoiceId) {\n\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId;\n\n      return api.get({\n        url: url\n      }, callback);\n    },\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n\n\n      /*\n       * Fetches multiple invoices with given query options\n       *\n       * @param {Object} invoiceId\n       * @param {Function} callback\n       *\n       * @return {Promise}\n       */\n\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip,\n          url = BASE_URL;\n\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n\n      return api.get({\n        url: url,\n        data: _extends({}, params, {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        })\n      }, callback);\n    },\n    notifyBy: function notifyBy(invoiceId, medium, callback) {\n\n      /*\n       * Send/re-send notification for invoice by given medium\n       * \n       * @param {String} invoiceId\n       * @param {String} medium\n       * @param {Function} callback\n       * \n       * @return {Promise}\n       */\n\n      if (!invoiceId) {\n\n        return Promise.reject(MISSING_ID_ERROR);\n      }\n\n      if (!medium) {\n\n        return Promise.reject(\"`medium` is required\");\n      }\n\n      var url = BASE_URL + \"/\" + invoiceId + \"/notify_by/\" + medium;\n\n      return api.post({\n        url: url\n      }, callback);\n    }\n  };\n};"]},"metadata":{},"sourceType":"script"}