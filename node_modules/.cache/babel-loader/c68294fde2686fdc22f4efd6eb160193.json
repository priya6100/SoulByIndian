{"ast":null,"code":"'use strict';\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar Promise = require(\"promise\");\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeBoolean = _require.normalizeBoolean,\n    normalizeNotes = _require.normalizeNotes;\n\nvar ID_REQUIRED_MSG = '`payment_id` is mandatory';\n\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip;\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n      return api.get({\n        url: '/payments',\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    fetch: function fetch(paymentId, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId\n      }, callback);\n    },\n    capture: function capture(paymentId, amount, currency, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      if (!amount) {\n        throw new Error('`amount` is mandatory');\n      }\n\n      var payload = {\n        amount: amount\n      };\n      /**\n       * For backward compatibility,\n       * the third argument can be a callback\n       * instead of currency.\n       * Set accordingly.\n       */\n\n      if (typeof currency === 'function' && !callback) {\n        callback = currency;\n        currency = undefined;\n      } else if (typeof currency === 'string') {\n        payload.currency = currency;\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/capture',\n        data: payload\n      }, callback);\n    },\n    refund: function refund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n      return api.post({\n        url: '/payments/' + paymentId + '/refund',\n        data: data\n      }, callback);\n    },\n    transfer: function transfer(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n\n      if (data.transfers) {\n        var transfers = data.transfers;\n        transfers.forEach(function (transfer) {\n          transfer.on_hold = normalizeBoolean(!!transfer.on_hold);\n        });\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/transfers',\n        data: data\n      }, callback);\n    },\n    bankTransfer: function bankTransfer(paymentId, callback) {\n      if (!paymentId) {\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/bank_transfer'\n      }, callback);\n    }\n  };\n};","map":{"version":3,"sources":["E:/redo final/frontend-main/node_modules/razorpay/dist/resources/payments.js"],"names":["_objectWithoutProperties","obj","keys","target","i","indexOf","Object","prototype","hasOwnProperty","call","Promise","require","_require","normalizeDate","normalizeBoolean","normalizeNotes","ID_REQUIRED_MSG","module","exports","api","all","params","arguments","length","undefined","callback","from","to","count","skip","Number","get","url","data","fetch","paymentId","Error","capture","amount","currency","payload","post","refund","notes","otherParams","assign","transfer","transfers","forEach","on_hold","bankTransfer","reject"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Promise = require(\"promise\");\n\nvar _require = require('../utils/razorpay-utils'),\n    normalizeDate = _require.normalizeDate,\n    normalizeBoolean = _require.normalizeBoolean,\n    normalizeNotes = _require.normalizeNotes;\n\nvar ID_REQUIRED_MSG = '`payment_id` is mandatory';\n\nmodule.exports = function (api) {\n  return {\n    all: function all() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments[1];\n      var from = params.from,\n          to = params.to,\n          count = params.count,\n          skip = params.skip;\n\n\n      if (from) {\n        from = normalizeDate(from);\n      }\n\n      if (to) {\n        to = normalizeDate(to);\n      }\n\n      count = Number(count) || 10;\n      skip = Number(skip) || 0;\n\n      return api.get({\n        url: '/payments',\n        data: {\n          from: from,\n          to: to,\n          count: count,\n          skip: skip\n        }\n      }, callback);\n    },\n    fetch: function fetch(paymentId, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId\n      }, callback);\n    },\n    capture: function capture(paymentId, amount, currency, callback) {\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      if (!amount) {\n        throw new Error('`amount` is mandatory');\n      }\n\n      var payload = {\n        amount: amount\n      };\n\n      /**\n       * For backward compatibility,\n       * the third argument can be a callback\n       * instead of currency.\n       * Set accordingly.\n       */\n      if (typeof currency === 'function' && !callback) {\n        callback = currency;\n        currency = undefined;\n      } else if (typeof currency === 'string') {\n        payload.currency = currency;\n      }\n\n      return api.post({\n        url: '/payments/' + paymentId + '/capture',\n        data: payload\n      }, callback);\n    },\n    refund: function refund(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n      return api.post({\n        url: '/payments/' + paymentId + '/refund',\n        data: data\n      }, callback);\n    },\n    transfer: function transfer(paymentId) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      if (!paymentId) {\n        throw new Error('`payment_id` is mandatory');\n      }\n\n      var notes = params.notes,\n          otherParams = _objectWithoutProperties(params, ['notes']);\n\n      var data = Object.assign(otherParams, normalizeNotes(notes));\n\n      if (data.transfers) {\n        var transfers = data.transfers;\n        transfers.forEach(function (transfer) {\n          transfer.on_hold = normalizeBoolean(!!transfer.on_hold);\n        });\n      }\n      return api.post({\n        url: '/payments/' + paymentId + '/transfers',\n        data: data\n      }, callback);\n    },\n    bankTransfer: function bankTransfer(paymentId, callback) {\n\n      if (!paymentId) {\n\n        return Promise.reject(ID_REQUIRED_MSG);\n      }\n\n      return api.get({\n        url: '/payments/' + paymentId + '/bank_transfer'\n      }, callback);\n    }\n  };\n};"]},"metadata":{},"sourceType":"script"}