{"ast":null,"code":"/** @format */\nimport axios from \"../helpers/axios\";\nimport { forgotPasswordConstants } from \"./constants\";\nexport const checkEmail = data => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(`forgot-password/check-email`, data);\n      const {\n        otp,\n        email\n      } = res.data;\n      console.log(res);\n      dispatch({\n        type: forgotPasswordConstants.GET_FORGOT_PASSWORD_REQUEST,\n        payload: {\n          email\n        }\n      });\n\n      if (res.status === 200) {\n        dispatch({\n          type: forgotPasswordConstants.GET_FORGOT_PASSWORD_SUCCESS,\n          payload: {\n            otp,\n            email\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: forgotPasswordConstants.GET_FORGOT_PASSWORD_FAILURE,\n          payload: {\n            error,\n            email\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const checkOtp = data => {\n  return async dispatch => {\n    try {\n      const {\n        otp,\n        inputOtp\n      } = data;\n      dispatch({\n        type: forgotPasswordConstants.GET_CHECK_OTP_REQUEST\n      });\n\n      if (otp === inputOtp) {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHECK_OTP_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHECK_OTP_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const changePassword = data => {\n  return async dispatch => {\n    const {\n      confirmPass,\n      pass,\n      email\n    } = data;\n\n    try {\n      dispatch({\n        type: forgotPasswordConstants.GET_CHANGE_PASSWORD_REQUEST\n      });\n\n      if (confirmPass === pass) {\n        const res = await axios.post(\"/forgot-password/change-password\", {\n          email,\n          password: pass\n        });\n\n        if (res.status === 200) {\n          dispatch({\n            type: forgotPasswordConstants.GET_CHANGE_PASSWORD_SUCCESS\n          });\n        } else {\n          dispatch({\n            type: forgotPasswordConstants.GET_CHANGE_PASSWORD_ERROR\n          });\n        }\n      } else {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHANGE_PASSWORD_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["E:/redo final/frontend-main/src/actions/forgotPassword.action.js"],"names":["axios","forgotPasswordConstants","checkEmail","data","dispatch","res","post","otp","email","console","log","type","GET_FORGOT_PASSWORD_REQUEST","payload","status","GET_FORGOT_PASSWORD_SUCCESS","error","GET_FORGOT_PASSWORD_FAILURE","checkOtp","inputOtp","GET_CHECK_OTP_REQUEST","GET_CHECK_OTP_SUCCESS","GET_CHECK_OTP_FAILURE","changePassword","confirmPass","pass","GET_CHANGE_PASSWORD_REQUEST","password","GET_CHANGE_PASSWORD_SUCCESS","GET_CHANGE_PASSWORD_ERROR","GET_CHANGE_PASSWORD_FAILURE"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,uBAAT,QAAwC,aAAxC;AAEA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,IAAN,CAAY,6BAAZ,EAA0CH,IAA1C,CAAlB;AACA,YAAM;AAAEI,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAiBH,GAAG,CAACF,IAA3B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAD,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEV,uBAAuB,CAACW,2BADvB;AAEPC,QAAAA,OAAO,EAAE;AAAEL,UAAAA;AAAF;AAFF,OAAD,CAAR;;AAIA,UAAIH,GAAG,CAACS,MAAJ,KAAe,GAAnB,EAAwB;AACtBV,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,uBAAuB,CAACc,2BADvB;AAEPF,UAAAA,OAAO,EAAE;AAAEN,YAAAA,GAAF;AAAOC,YAAAA;AAAP;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACL,cAAM;AAAEQ,UAAAA;AAAF,YAAYX,GAAG,CAACF,IAAtB;AACAC,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,uBAAuB,CAACgB,2BADvB;AAEPJ,UAAAA,OAAO,EAAE;AAAEG,YAAAA,KAAF;AAASR,YAAAA;AAAT;AAFF,SAAD,CAAR;AAID;AACF,KApBD,CAoBE,OAAOQ,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAME,QAAQ,GAAIf,IAAD,IAAU;AAChC,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAM;AAAEG,QAAAA,GAAF;AAAOY,QAAAA;AAAP,UAAoBhB,IAA1B;AAEAC,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEV,uBAAuB,CAACmB;AADvB,OAAD,CAAR;;AAIA,UAAIb,GAAG,KAAKY,QAAZ,EAAsB;AACpBf,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,uBAAuB,CAACoB;AADvB,SAAD,CAAR;AAGD,OAJD,MAIO;AACLjB,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,uBAAuB,CAACqB;AADvB,SAAD,CAAR;AAGD;AACF,KAhBD,CAgBE,OAAON,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAMO,cAAc,GAAIpB,IAAD,IAAU;AACtC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAM;AAAEoB,MAAAA,WAAF;AAAeC,MAAAA,IAAf;AAAqBjB,MAAAA;AAArB,QAA+BL,IAArC;;AACA,QAAI;AACFC,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEV,uBAAuB,CAACyB;AADvB,OAAD,CAAR;;AAIA,UAAIF,WAAW,KAAKC,IAApB,EAA0B;AACxB,cAAMpB,GAAG,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,kCAAX,EAA+C;AAC/DE,UAAAA,KAD+D;AAE/DmB,UAAAA,QAAQ,EAAEF;AAFqD,SAA/C,CAAlB;;AAKA,YAAIpB,GAAG,CAACS,MAAJ,KAAe,GAAnB,EAAwB;AACtBV,UAAAA,QAAQ,CAAC;AACPO,YAAAA,IAAI,EAAEV,uBAAuB,CAAC2B;AADvB,WAAD,CAAR;AAGD,SAJD,MAIO;AACLxB,UAAAA,QAAQ,CAAC;AACPO,YAAAA,IAAI,EAAEV,uBAAuB,CAAC4B;AADvB,WAAD,CAAR;AAGD;AACF,OAfD,MAeO;AACLzB,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,uBAAuB,CAAC6B;AADvB,SAAD,CAAR;AAGD;AACF,KAzBD,CAyBE,OAAOd,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD;AACF,GA9BD;AA+BD,CAhCM","sourcesContent":["/** @format */\n\nimport axios from \"../helpers/axios\";\nimport { forgotPasswordConstants } from \"./constants\";\n\nexport const checkEmail = (data) => {\n  return async (dispatch) => {\n    try {\n      const res = await axios.post(`forgot-password/check-email`, data);\n      const { otp, email } = res.data;\n      console.log(res);\n      dispatch({\n        type: forgotPasswordConstants.GET_FORGOT_PASSWORD_REQUEST,\n        payload: { email },\n      });\n      if (res.status === 200) {\n        dispatch({\n          type: forgotPasswordConstants.GET_FORGOT_PASSWORD_SUCCESS,\n          payload: { otp, email },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: forgotPasswordConstants.GET_FORGOT_PASSWORD_FAILURE,\n          payload: { error, email },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const checkOtp = (data) => {\n  return async (dispatch) => {\n    try {\n      const { otp, inputOtp } = data;\n\n      dispatch({\n        type: forgotPasswordConstants.GET_CHECK_OTP_REQUEST,\n      });\n\n      if (otp === inputOtp) {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHECK_OTP_SUCCESS,\n        });\n      } else {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHECK_OTP_FAILURE,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const changePassword = (data) => {\n  return async (dispatch) => {\n    const { confirmPass, pass, email } = data;\n    try {\n      dispatch({\n        type: forgotPasswordConstants.GET_CHANGE_PASSWORD_REQUEST,\n      });\n\n      if (confirmPass === pass) {\n        const res = await axios.post(\"/forgot-password/change-password\", {\n          email,\n          password: pass,\n        });\n\n        if (res.status === 200) {\n          dispatch({\n            type: forgotPasswordConstants.GET_CHANGE_PASSWORD_SUCCESS,\n          });\n        } else {\n          dispatch({\n            type: forgotPasswordConstants.GET_CHANGE_PASSWORD_ERROR,\n          });\n        }\n      } else {\n        dispatch({\n          type: forgotPasswordConstants.GET_CHANGE_PASSWORD_FAILURE,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}