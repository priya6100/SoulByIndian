{"ast":null,"code":"/** @format */\nimport axios from \"../helpers/axios\";\nimport { changePasswordConstants } from \"./constants\";\nexport const checkPassword = ({\n  pass,\n  email\n}) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_REQUEST\n      });\n      console.log(email, pass, \" this email\");\n      const res = await axios.post(\"/signin\", {\n        email,\n        password: pass\n      });\n      console.log(res);\n\n      if (res.status === 200) {\n        dispatch({\n          type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const changePasswordPage = data => {\n  return async dispatch => {\n    const {\n      confirmPass,\n      changePass,\n      email\n    } = data;\n\n    try {\n      dispatch({\n        type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_REQUEST\n      });\n\n      if (confirmPass === changePass) {\n        const res = await axios.post(\"/forgot-password/change-password\", {\n          email,\n          password: changePass\n        });\n\n        if (res.status === 200) {\n          dispatch({\n            type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_SUCCESS\n          });\n        } else {\n          dispatch({\n            type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_ERROR\n          });\n        }\n      } else {\n        dispatch({\n          type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["E:/redo final/frontend-main/src/actions/changePassword.action.js"],"names":["axios","changePasswordConstants","checkPassword","pass","email","dispatch","type","GET_CHECK_PASSWORD_PAGE_REQUEST","console","log","res","post","password","status","GET_CHECK_PASSWORD_PAGE_SUCCESS","GET_CHECK_PASSWORD_PAGE_FAILURE","error","changePasswordPage","data","confirmPass","changePass","GET_CHANGE_PASSWORD_PAGE_REQUEST","GET_CHANGE_PASSWORD_PAGE_SUCCESS","GET_CHANGE_PASSWORD_PAGE_ERROR","GET_CHANGE_PASSWORD_PAGE_FAILURE"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,uBAAT,QAAwC,aAAxC;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AAChD,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,uBAAuB,CAACM;AADvB,OAAD,CAAR;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBD,IAAnB,EAAyB,aAAzB;AAEA,YAAMO,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,SAAX,EAAsB;AACtCP,QAAAA,KADsC;AAEtCQ,QAAAA,QAAQ,EAAET;AAF4B,OAAtB,CAAlB;AAKAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;;AAEA,UAAIA,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtBR,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEL,uBAAuB,CAACa;AADvB,SAAD,CAAR;AAGD,OAJD,MAIO;AACLT,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEL,uBAAuB,CAACc;AADvB,SAAD,CAAR;AAGD;AACF,KAvBD,CAuBE,OAAOC,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;AACF,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AAC1C,SAAO,MAAOb,QAAP,IAAoB;AACzB,UAAM;AAAEc,MAAAA,WAAF;AAAeC,MAAAA,UAAf;AAA2BhB,MAAAA;AAA3B,QAAqCc,IAA3C;;AACA,QAAI;AACFb,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,uBAAuB,CAACoB;AADvB,OAAD,CAAR;;AAIA,UAAIF,WAAW,KAAKC,UAApB,EAAgC;AAC9B,cAAMV,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,kCAAX,EAA+C;AAC/DP,UAAAA,KAD+D;AAE/DQ,UAAAA,QAAQ,EAAEQ;AAFqD,SAA/C,CAAlB;;AAKA,YAAIV,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtBR,UAAAA,QAAQ,CAAC;AACPC,YAAAA,IAAI,EAAEL,uBAAuB,CAACqB;AADvB,WAAD,CAAR;AAGD,SAJD,MAIO;AACLjB,UAAAA,QAAQ,CAAC;AACPC,YAAAA,IAAI,EAAEL,uBAAuB,CAACsB;AADvB,WAAD,CAAR;AAGD;AACF,OAfD,MAeO;AACLlB,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEL,uBAAuB,CAACuB;AADvB,SAAD,CAAR;AAGD;AACF,KAzBD,CAyBE,OAAOR,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;AACF,GA9BD;AA+BD,CAhCM","sourcesContent":["/** @format */\n\nimport axios from \"../helpers/axios\";\nimport { changePasswordConstants } from \"./constants\";\n\nexport const checkPassword = ({ pass, email }) => {\n  return async (dispatch) => {\n    try {\n      dispatch({\n        type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_REQUEST,\n      });\n\n      console.log(email, pass, \" this email\");\n\n      const res = await axios.post(\"/signin\", {\n        email,\n        password: pass,\n      });\n\n      console.log(res);\n\n      if (res.status === 200) {\n        dispatch({\n          type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_SUCCESS,\n        });\n      } else {\n        dispatch({\n          type: changePasswordConstants.GET_CHECK_PASSWORD_PAGE_FAILURE,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const changePasswordPage = (data) => {\n  return async (dispatch) => {\n    const { confirmPass, changePass, email } = data;\n    try {\n      dispatch({\n        type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_REQUEST,\n      });\n\n      if (confirmPass === changePass) {\n        const res = await axios.post(\"/forgot-password/change-password\", {\n          email,\n          password: changePass,\n        });\n\n        if (res.status === 200) {\n          dispatch({\n            type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_SUCCESS,\n          });\n        } else {\n          dispatch({\n            type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_ERROR,\n          });\n        }\n      } else {\n        dispatch({\n          type: changePasswordConstants.GET_CHANGE_PASSWORD_PAGE_FAILURE,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}