{"ast":null,"code":"/** @format */\nimport axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/getCartItems`);\n\n      if (res.status === 200) {\n        const {\n          cartItems\n        } = res.data;\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: {\n              cartItems\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async dispatch => {\n    const {\n      cart: {\n        cartItems\n      },\n      auth\n    } = store.getState(); //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n\n    const qty = cartItems[product._id] ? parseInt(cartItems[product._id].qty + newQty) : 1;\n    cartItems[product._id] = { ...product,\n      qty\n    };\n    const payload = {\n      cartItems: [{\n        product: product._id,\n        name: product.name,\n        price: product.price,\n        img: product.img,\n        size: product.size,\n        color: product.color,\n        quantity: qty\n      }]\n    };\n\n    if (auth.authenticate) {\n      dispatch({\n        type: cartConstants.ADD_TO_CART_REQUEST\n      });\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      dispatch({\n        type: cartConstants.ADD_TO_CART_SUCCESS,\n        payload: {\n          cartItems\n        }\n      });\n\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(payload.cartItems));\n    }\n  };\n};\nexport const removeCartItem = payload => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: cartConstants.REMOVE_CART_ITEM_REQUEST\n      });\n      const res = await axios.post(`/user/cart/removeItem`, {\n        payload\n      });\n\n      if (res.status === 202) {\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_SUCCESS\n        });\n        dispatch(getCartItems());\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCart = () => {\n  return async dispatch => {\n    const {\n      auth,\n      cartItems\n    } = store.getState(); // let cartItems = localStorage.getItem(\"cart\")\n    //   ? JSON.parse(localStorage.getItem(\"cart\"))\n    //   : null;\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\"); // dispatch(getCartItems());\n\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              product: cartItems[key]._id,\n              quantity: cartItems[key].qty,\n              name: cartItems[key].name,\n              price: cartItems[key].price,\n              img: cartItems[key].img,\n              size: cartItems[key].size,\n              color: cartItems[key].color\n            };\n          })\n        };\n\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      }\n    } else {\n      if (cartItems) {\n        console.log(\"update\");\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: {\n            cartItems\n          }\n        });\n      }\n    }\n  };\n};\nexport { getCartItems };","map":{"version":3,"sources":["E:/redo final/frontend-main/src/actions/cart.action.js"],"names":["axios","cartConstants","store","getCartItems","dispatch","type","ADD_TO_CART_REQUEST","res","post","status","cartItems","data","ADD_TO_CART_SUCCESS","payload","error","console","log","addToCart","product","newQty","cart","auth","getState","qty","_id","parseInt","name","price","img","size","color","quantity","authenticate","localStorage","setItem","JSON","stringify","removeCartItem","REMOVE_CART_ITEM_REQUEST","REMOVE_CART_ITEM_SUCCESS","REMOVE_CART_ITEM_FAILURE","updateCart","removeItem","Object","keys","map","key","index","length"],"mappings":"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","sourcesContent":["/** @format */\n\nimport axios from \"../helpers/axios\";\nimport { cartConstants } from \"./constants\";\nimport store from \"../store\";\n\nconst getCartItems = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n      const res = await axios.post(`/user/getCartItems`);\n      if (res.status === 200) {\n        const { cartItems } = res.data;\n\n        if (cartItems) {\n          dispatch({\n            type: cartConstants.ADD_TO_CART_SUCCESS,\n            payload: { cartItems },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const addToCart = (product, newQty = 1) => {\n  return async (dispatch) => {\n    const {\n      cart: { cartItems },\n      auth,\n    } = store.getState();\n    //console.log('action::products', products);\n    //const product = action.payload.product;\n    //const products = state.products;\n    const qty = cartItems[product._id]\n      ? parseInt(cartItems[product._id].qty + newQty)\n      : 1;\n\n    cartItems[product._id] = {\n      ...product,\n      qty,\n    };\n\n    const payload = {\n      cartItems: [\n        {\n          product: product._id,\n          name: product.name,\n          price: product.price,\n          img: product.img,\n          size: product.size,\n          color: product.color,\n          quantity: qty,\n        },\n      ],\n    };\n\n    if (auth.authenticate) {\n      dispatch({ type: cartConstants.ADD_TO_CART_REQUEST });\n\n      const res = await axios.post(`/user/cart/addtocart`, payload);\n      console.log(res);\n      dispatch({\n        type: cartConstants.ADD_TO_CART_SUCCESS,\n        payload: { cartItems },\n      });\n      if (res.status === 201) {\n        dispatch(getCartItems());\n      }\n    } else {\n      localStorage.setItem(\"cart\", JSON.stringify(payload.cartItems));\n    }\n  };\n};\n\nexport const removeCartItem = (payload) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: cartConstants.REMOVE_CART_ITEM_REQUEST });\n      const res = await axios.post(`/user/cart/removeItem`, { payload });\n      if (res.status === 202) {\n        dispatch({ type: cartConstants.REMOVE_CART_ITEM_SUCCESS });\n\n        dispatch(getCartItems());\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: cartConstants.REMOVE_CART_ITEM_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateCart = () => {\n  return async (dispatch) => {\n    const { auth, cartItems } = store.getState();\n    // let cartItems = localStorage.getItem(\"cart\")\n    //   ? JSON.parse(localStorage.getItem(\"cart\"))\n    //   : null;\n\n    if (auth.authenticate) {\n      localStorage.removeItem(\"cart\");\n      // dispatch(getCartItems());\n      if (cartItems) {\n        const payload = {\n          cartItems: Object.keys(cartItems).map((key, index) => {\n            return {\n              product: cartItems[key]._id,\n              quantity: cartItems[key].qty,\n              name: cartItems[key].name,\n              price: cartItems[key].price,\n              img: cartItems[key].img,\n              size: cartItems[key].size,\n              color: cartItems[key].color,\n            };\n          }),\n        };\n        if (Object.keys(cartItems).length > 0) {\n          const res = await axios.post(`/user/cart/addtocart`, payload);\n          if (res.status === 201) {\n            dispatch(getCartItems());\n          }\n        }\n      }\n    } else {\n      if (cartItems) {\n        console.log(\"update\");\n        dispatch({\n          type: cartConstants.ADD_TO_CART_SUCCESS,\n          payload: { cartItems },\n        });\n      }\n    }\n  };\n};\n\nexport { getCartItems };\n"]},"metadata":{},"sourceType":"module"}