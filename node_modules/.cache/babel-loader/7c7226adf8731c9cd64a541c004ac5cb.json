{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  error: null,\n  loading: false\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n\n    {\n      myCategories.push({ ...cat,\n        img: cat.img ? buildNewCategories(parentId, cat.img, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUIEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updateCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log(updateCategories, \"djshfhdjfhkdfh\");\n      state = { ...state,\n        categories: updateCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["E:/redo final/frontend-main/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","error","loading","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","push","img","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUIEST","ADD_NEW_CATEGORY_SUCCESS","updateCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"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","sourcesContent":["import { categoryConstants } from \"../actions/constants\"\n\nconst initState ={\n    categories: [],\n    error: null,\n    loading: false\n};\n\nconst buildNewCategories = (parentId, categories, category) =>{\n    let myCategories =[];\n\n    if(parentId == undefined){\n\n        return [\n\n            ...categories,\n            {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n                children: []\n            }\n\n        ];\n    }\n\n    for(let cat of categories){\n\n\n        if(cat._id == parentId){\n\n            myCategories.push({\n                ...cat,\n                children: cat.children  ? buildNewCategories(parentId, [ ...cat.children, {\n\n                    _id:category._id,\n                    name:category.name,\n                    slug:category.slug,\n                    parentId:category.parentId,\n                    children:category.children\n\n                }], category) : []\n            });\n        } else {\n            \n        myCategories.push({\n            ...cat,\n            children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n        });\n     } {\n      \n            myCategories.push({\n                ...cat,\n            img: cat.img ? buildNewCategories(parentId, cat.img, category) : []\n            });\n            }\n\n\n    }\n\n    return myCategories;\n\n}\n\nexport default (state = initState, action) =>{\n\n    switch(action.type){\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n            state={\n                ...state,\n               categories: action.payload.categories\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_REQUIEST:\n            state={\n                ...state,\n                loading: true\n            }\n            break;\n\n            case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n                const category = action.payload.category;\n                const updateCategories = buildNewCategories(category.parentId, state.categories, category);\n                console.log(updateCategories, \"djshfhdjfhkdfh\");\n                state={\n                    ...state,\n                 categories: updateCategories,\n                  loading: false\n                }\n                break;\n         \n                case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n                    state={\n                      ...initState\n                    }\n                    break;\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}